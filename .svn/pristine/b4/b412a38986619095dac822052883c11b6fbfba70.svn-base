package com.hanul.CatHolic;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.Gson;

import board.dto.BoardCommentDTO;
import board.dto.BoardDTO;
import board.dto.BoardPage;
import board.service.BoardService;
import calender.dto.CalenderDTO;
import common.service.CommonService;
import member.dto.MemberDTO;

@Controller 
public class BoardController {
	@Autowired BoardService service;
	
	Gson gson= new Gson();
	
	@ResponseBody
	@RequestMapping("/minsert.bo")
	public String insert(BoardDTO dto,@RequestBody BoardDTO vo) {
		dto=vo;
		service.board_insert(dto);
		
		return "";
	}
	@ResponseBody
	@RequestMapping("/mdelete.bo")
	public String delete(@RequestParam int bo_id) {
		service.board_delete(bo_id);
		return "";
	}
	@ResponseBody
	@RequestMapping("/mupdate.bo")
	public String update(BoardDTO dto,@RequestBody BoardDTO vo) {
		dto=vo;
		service.board_update(dto);
		return "";
	}
	@ResponseBody
	@RequestMapping("/mlist.bo")
	public String list() throws ParseException {
		Gson gson= new Gson();
		;
		System.out.println("게시판들어옵니다");
		ArrayList<BoardDTO> dto = (ArrayList<BoardDTO>) service.board_list();
		if(dto.size()==0) {
			dto=null;
		}else {
		for(int i=0;i<dto.size();i++) {
		Date dateSt;
	
		dateSt = new SimpleDateFormat("yyyy-mm-dd",Locale.ENGLISH).parse(dto.get(i).getWritedate().toString());
		
		String st2 = new SimpleDateFormat("yyyy-MM-dd", Locale.KOREA).format(dateSt);
		dto.get(i).setWritedate(null);
		dto.get(i).setDatestring(st2);
		}
		}
		
		String DD=gson.toJson(dto);
		return DD;
	}
	@ResponseBody
	@RequestMapping("/mlist_class.bo")
	public String list_class(@RequestParam String classfy) {
		Gson gson= new Gson();
		String dd=gson.toJson(service.board_list_class(Integer.parseInt(classfy)));
		return dd;
	}
	@ResponseBody
	@RequestMapping("/mmodify.bo")
	public String modify(@RequestParam String bo_id) {
		service.read_board(Integer.parseInt(bo_id));
		Gson gson= new Gson();
		String DD=gson.toJson(service.board_modify(Integer.parseInt(bo_id)));
		return DD;
	}
	
	
	
	//댓글
	@ResponseBody
	@RequestMapping("/mcomm_insert.bo")
	public String comm_insert(BoardCommentDTO dto,@RequestBody BoardCommentDTO vo) {
		dto=vo;
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("succ",service.board_comment_insert(dto));
		String VV=gson.toJson(map);
		return VV;
	}
	@ResponseBody
	@RequestMapping("/mcomm_delete.bo")
	public String comm_delete(@RequestParam int comm_id) {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("succ",service.board_comment_delete(comm_id));
		String VV=gson.toJson(map);
		return VV;
	}
	@ResponseBody
	@RequestMapping("/mcomm_update.bo")
	public String comm_update(BoardCommentDTO dto,@RequestBody BoardCommentDTO vo) {
		dto=vo;
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("succ",service.board_comment_update(dto));
		String VV=gson.toJson(map);
		return VV;
	}
	@ResponseBody
	@RequestMapping("/mcomm_list.bo")
	public String comm_list(@RequestParam String p_id) {
		String VV=gson.toJson(service.board_comment_list(Integer.parseInt(p_id)));
		return VV;
	}
	
	//Web
	
	//게시판 목록
	@RequestMapping("/list.bo")
	public String list(Model model) {
		
		model.addAttribute("vo", service.list());
		//System.out.println("list:"+service.board_list().size());
		//System.out.println("Service :"+service.board_list().get(0).getBo_id());
		
		//목록화면에 출력한다.
		return "board/list";
	}
	
	//게시판 신규화면 요청
		@RequestMapping("/new.bo")
		public String board() {
			return "board/new";
	}
	
	/*@Autowired CommonService common;*/
	
	//게시판 저장처리 요청
	@RequestMapping("/insert.bo")
	public String insert(BoardDTO vo, HttpSession session) {
		//화면에서 입력한 정보를 DB에 저장한 후
		//userid 는 로그인한 사용자의 아이디
		vo.setNickname(((MemberDTO)session.getAttribute("login_info")).getNickname());
		
		//첨부파일이 있는 경우의 처리
		/*vo.setImagename("");
		vo.setImagepath("");
		if( file.getSize()>0 ) {
			vo.setImagename(file.getOriginalFilename());
			vo.setImagepath( 
				common.upload("board", file, session) );
		}*/
			
		service.insert(vo);
		//목록 화면으로 연결
		return "redirect:list.bo";
	}
	
	
		//방명록 상세정보화면 요청
		@RequestMapping("/detail.bo")
		public String detail(Model model, @RequestParam int bo_id) {
			//선택한 글의 정보를 DB에서 조회해와
			//service.readCount(bo_id);
			//상세화면에 출력: Model에 데이터를 담는다.
			model.addAttribute("vo", service.select(bo_id));
			return "board/detail";
		}	

	
}