스프링 프로젝트와 관련된 데이터처리를 할 user를 만든다.
cmd > sqlplus system/0000
SQL> create user sw identified by sw;
SQL> grant dba to sw;

SQLdeveloper 에서 sw 유저에 접속할 접속을 만든다.
 

고객관리 테이블
create table customer(
id			number(8) constraint customer_id_pk primary key,
name		varchar2(30) not null,
gender		varchar2(3) default '남' not null ,
email		varchar2(50),
phone		varchar2(13) 

);


customer 테이블의 id 컬럼에 적용할 시퀀스 
create sequence seq_customer
start with 1 increment by 1;

customer 테이블의 id 컬럼에 시퀀스를 적용할 트리거
create or replace trigger trg_customer
	before insert on customer
	for each row 
begin
	select seq_customer.nextval into :new.id from dual;
end;
/

DB와 연결해서 데이터 관련 처리를 하려면 ojdbc 라이브러리,
spring 에서 jdbc를 연결할 수 있도록 하는 기능을 가진 라이브러리,
DB 연결은 DataBase Connection Pool(DBCP) 를 사용.
: DBCP를 사용할 라이브러리,
Mybatis 를 사용하기 위한 라이브러리
spring 과 Mybatis 를 연결하기 위한 라이브러리

-> 필요한 라이브러리들은 pom.xml 에 태그로 선언한다.
: mvnrepository.com 
jdbc를 연결 라이브러리 : spring-jdbc
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>4.3.18.RELEASE</version>
</dependency>

DBCP 라이브러리: dbcp
<dependency>
    <groupId>commons-dbcp</groupId>
    <artifactId>commons-dbcp</artifactId>
    <version>1.4</version>
</dependency>

Mybatis 라이브러리
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.4.6</version>
</dependency>

 
spring 과 Mybatis 연결  라이브러리
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>1.3.1</version>
</dependency>
 

오라클 라이브러리: maven.jahia.org/maven2
<dependency>
    <groupId>com.oracle</groupId>
    <artifactId>ojdbc6</artifactId>
    <version>12.1.0.2</version>
</dependency>
공공저장소에서 다운로드할 수 없으므로 다운로드할 저장소를 등록한다.
	<repositories>
		<repository>
			<id>maven2_repo</id>
			<url>http://maven.jahia.org/maven2</url>		
		</repository>
	</repositories>
	

1. 브라우저에 url 요청
Controller: 2. 브라우저에서의 요청에 대한 처리
            3. Service의 메소드를 호출
            6. 화면에 출력할 데이터가 있다면 Model에 담는다.
            7. 어떤 화면으로 연결할 것인지 결정
4. Service: DAO의 메소드를 호출
5. DAO: Mapper의 쿼리문 태그를 실행
8. jsp: Model 에 담긴 데이터를 출력한다.

Service 는 @Service
DAO 는 @Repository 를 선언하여 객체를 생성해 메모리에 올린다.
메모리에 올릴 @Service, @Repository 선언한 객체를 찾아갈 수 있도록
스캐닝대상에 패키지를 등록한다. : root-context.xml

Mapper 파일은 mapper 태그를 선언할 수 있도록 문서형태를 지정한다.
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


css, js, img 등의 resource 를 찾아갈 수 있도록 등록한다.
: servlet-context.xml 에 resource 태그로 등록한다.


웹폰트 만들기: transfonter.org

화면에 대한 Template 을 만들고
모든 요청에 대해 Template 의 형태로 화면이 이루어지도록 지정한다.
spring의 버전을 3.2 이상으로 올린다.
: 3.2.2.RELEASE

: tiles 처리: pom.xml
<dependency>
    <groupId>org.apache.tiles</groupId>
    <artifactId>tiles-jsp</artifactId>
    <version>3.0.5</version>
</dependency>

http://tiles.apache.org/ 사이트에서
Tiles 3.0 Documentation 클릭
Tiles definition file documentation 클릭
dtd 를 복사해 선언하여 template 에 대한 tiles 선언 파일을 만든다.
<!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN" "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">
<tiles-definitions>
	<definition name="layout" 
			template="/WEB-INF/views/tiles/layout.jsp">
		<put-attribute name="header" 
			value="/WEB-INF/views/include/header.jsp"/>
		<put-attribute name="footer" 
			value="/WEB-INF/views/include/footer.jsp"/>
	</definition>
	<definition name="*/*" extends="layout">
		<put-attribute name="main"
			value="/WEB-INF/views/{1}/{2}.jsp"/>
	</definition>
	
	<definition name="*" extends="layout">
		<put-attribute name="main"
			value="/WEB-INF/views/{1}.jsp"/>
	</definition>
</tiles-definitions>

tiles 파일에 선언한 속성대로 화면의 레이아웃을 만들 layout 파일을 만든다.
<%@ taglib uri="http://tiles.apache.org/tags-tiles" prefix="tiles" %>    
<tiles:insertAttribute name="header"/>
<tiles:insertAttribute name="main"/>
<tiles:insertAttribute name="footer"/>


servlet-context.xml 에 화면연결처리방식을 
tiles를 사용하도록 선언한다.
<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<beans:property name="order" value="0"/>
	</beans:bean>
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions"
				value="/WEB-INF/views/tiles/tiles.xml" />
	</beans:bean>



공지글관리
create table notice(id number constraint notice_id_pk primary key,
writer varchar2(30) not null,
title varchar2(300) not null,
content varchar2(4000) not null,
writedate date default sysdate not null,
readcnt number default 0,
filepath varchar2(200),
filename varchar2(200)
root number,
step number default 0, 답글순서
indent number default 0 
);
답글관련 처리
원글정보, 답글순서,들여쓰기 정도

alter table notice add(root number,step number default 0,indent number default 0);

update notice set root=id;
답글을 작성하는 경우 triger를 통해 시퀀스를 자동적용 하면 안됨
사용중인 triger를 비활성시킨다
alter trigger trg_notice disable;

공지글관리 테이블의 pk인 id컬럼에 적용할 시퀀스
create sequence seq_notice start with 1 increment by 1;

공지글 관리 테이블의 pk인 id 컬럼에 시퀀스 자동 적용할 트리거
create or replace trigger trg_notice
before  insert on notice for each row
begin select seq_notice.nextval into  :new id from dual;
end;

다운로드